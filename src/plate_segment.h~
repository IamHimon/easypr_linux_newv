#ifndef EASYPR_CORE_CHARSSEGMENT_H_
#define EASYPR_CORE_CHARSSEGMENT_H_

#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp>

#include <algorithm>
#include<vector>

using namespace std;
using namespace cv;

namespace easypr {

	enum Color { BLUE, YELLOW, WHITE, UNKNOWN };

	enum LocateType { SOBEL, COLOR, OTHER };

	class CCharsSegment {
	public:
		CCharsSegment();

		void rect_sort(vector<Rect> sortedRect);
		//重构比较函数
		//bool cmp(const Rect& r1, const Rect& r2);
		//! 字符分割

		int charsSegment(Mat input, std::vector<Mat>& resultVec);

		//! 字符尺寸验证

		bool verifyCharSizes(Mat r);

		//! 字符预处理

		Mat preprocessChar(Mat in);

		//! 根据特殊车牌来构造猜测中文字符的位置和大小

		Rect GetChineseRect(const Rect rectSpe);

		//! 找出指示城市的字符的Rect，例如苏A7003X，就是A的位置

		int GetSpecificRect(const std::vector<Rect>& vecRect);

		//! 这个函数做两个事情
		//  1.把特殊字符Rect左边的全部Rect去掉，后面再重建中文字符的位置。
		//  2.从特殊字符Rect开始，依次选择6个Rect，多余的舍去。

		int RebuildRect(const std::vector<Rect>& vecRect, std::vector<Rect>& outRect,
			int specIndex);

		//! 将Rect按位置从左到右进行排序

		int SortRect(const std::vector<Rect>& vecRect, std::vector<Rect>& out);

		//! 设置变量

		inline void setLiuDingSize(int param) { m_LiuDingSize = param; }
		inline void setColorThreshold(int param) { m_ColorThreshold = param; }

		inline void setBluePercent(float param) { m_BluePercent = param; }
		inline float getBluePercent() const { return m_BluePercent; }
		inline void setWhitePercent(float param) { m_WhitePercent = param; }
		inline float getWhitePercent() const { return m_WhitePercent; }

		//! 是否开启调试模式常量，默认0代表关闭

		static const int DEFAULT_DEBUG = 1;

		//! preprocessChar所用常量

		static const int CHAR_SIZE = 20;
		static const int HORIZONTAL = 1;
		static const int VERTICAL = 0;

		//! preprocessChar所用常量

		static const int DEFAULT_LIUDING_SIZE = 7;
		static const int DEFAULT_MAT_WIDTH = 136;
		static const int DEFAULT_COLORTHRESHOLD = 150;

		//! 是否开启调试模式

		inline void setDebug(int param) { m_debug = param; }

		//! 获取调试模式状态

		inline int getDebug() { return m_debug; }

		//! 根据一幅图像与颜色模板获取对应的二值图
		//! 输入RGB图像, 颜色模板（蓝色、黄色）
		//! 输出灰度图（只有0和255两个值，255代表匹配，0代表不匹配）

		Mat colorMatch(const Mat& src, Mat& match, const Color r,
			const bool adaptive_minsv);

		//! 判断一个车牌的颜色
		//! 输入车牌mat与颜色模板
		//! 返回true或fasle

		bool plateColorJudge(const Mat& src, const Color r, const bool adaptive_minsv,
			float& percent);

		//去除车牌上方的钮钉
		//计算每行元素的阶跃数，如果小于X认为是柳丁，将此行全部填0（涂黑）
		// X的推荐值为，可根据实际调整

		bool clearLiuDing(Mat& img);

		//! 获得车牌颜色

		Color getPlateType(const Mat& src, const bool adaptive_minsv);

		//获得阈值(OTSO算法求得阈值)
		int ThresholdOtsu(Mat mat);


	private:

		//！柳钉判断参数

		int m_LiuDingSize;

		//！车牌大小参数

		int m_theMatWidth;

		//！车牌颜色判断参数

		int m_ColorThreshold;
		float m_BluePercent;
		float m_WhitePercent;

		//! 是否开启调试模式，0关闭，非0开启

		int m_debug;
	};

}

#endif  EASYPR_CORE_CHARSSEGMENT_H_
